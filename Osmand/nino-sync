#!/usr/bin/env python3
import sys
import os
import time
import subprocess

workdir = os.getcwd()
subprojects = [subfolder for subfolder in os.listdir() if os.path.isdir(subfolder) and ".git" in os.listdir(subfolder)]

def lastdate():
	try:
		date = str(int((time.time() - os.path.getmtime('.lastdate'))/60)) + " minutes ago"
	except:
		date = "date unknown"
	print(date)

def changes():
	modified = 1
	for subproject in subprojects:
		changes = subprocess.Popen(["git", "-C", subproject, "diff"], stdout = subprocess.PIPE).communicate()[0]
		if changes != "":
			modified = 0
			with open(subproject + "/changes.diff", "wb") as diff:
				diff.write(changes)
	sys.exit(modified)

def fetch():
	fetched = 0
	for subproject in subprojects:
		print("Fetching subproject " + subproject)
		fetched += subprocess.call(["git", "-C", subproject, "fetch"])
	sys.exit(fetched)

def updated():
	count = 0
	for subproject in subprojects:
		# Branch and remote name on current local repository
		branch = subprocess.Popen(["git", "-C", subproject, "branch", "--show-current"], stdout = subprocess.PIPE).communicate()[0].decode('ascii').strip()
		remote = subprocess.Popen(["git", "-C", subproject, "remote"], stdout = subprocess.PIPE).communicate()[0].decode('ascii').strip()
		# Amount of commits the remote is ahead of the local copy
		count += int(subprocess.Popen(["git", "-C", subproject, "rev-list", branch + ".." + remote + "/" + branch, "--count"], stdout = subprocess.PIPE).communicate()[0].decode('ascii').strip())
	# If everything went find touch the .lastdate file to mark date of update
	if count > 0:
		open('.lastdate', 'w').close()
	sys.exit(0 if count > 0 else 1)

def merge():
	merged = 0
	for subproject in subprojects:
		print("Cleaning subproject " + subproject)
		subprocess.call(["git", "-C", subproject, "checkout", "."])
		print("Merging subproject " + subproject)
		merged += subprocess.call(["git", "-C", subproject, "merge"])
	sys.exit(merged)

def restore():
	restored = 0
	for subproject in subprojects:
		if os.path.isfile(subproject + "/changes.diff"):
			print("Restoring subproject " + subproject)
			with open(subproject + "/changes.diff", "r") as file:
				print(file.read())
			restored += subprocess.call(["git", "-C", subproject, "apply", "changes.diff"])
	sys.exit(restored)

args = {
	"lastdate": lastdate,
	"changes": changes,
	"fetch": fetch,
	"updated": updated,
	"merge": merge,
	"restore": restore 
}

args[sys.argv[1]]()
