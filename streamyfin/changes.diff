diff --git a/bun.lockb b/bun.lockb
index 3a1947c..fa93ecc 100755
Binary files a/bun.lockb and b/bun.lockb differ
Submodule utils/jellyseerr e69d160..4401b16:
diff --git a/utils/jellyseerr/server/api/servarr/base.ts b/utils/jellyseerr/server/api/servarr/base.ts
new file mode 100644
index 00000000..e5362674
--- /dev/null
+++ b/utils/jellyseerr/server/api/servarr/base.ts
@@ -0,0 +1,74 @@
+export interface SystemStatus {
+  version: string;
+  buildTime: Date;
+  isDebug: boolean;
+  isProduction: boolean;
+  isAdmin: boolean;
+  isUserInteractive: boolean;
+  startupPath: string;
+  appData: string;
+  osName: string;
+  osVersion: string;
+  isNetCore: boolean;
+  isMono: boolean;
+  isLinux: boolean;
+  isOsx: boolean;
+  isWindows: boolean;
+  isDocker: boolean;
+  mode: string;
+  branch: string;
+  authentication: string;
+  sqliteVersion: string;
+  migrationVersion: number;
+  urlBase: string;
+  runtimeVersion: string;
+  runtimeName: string;
+  startTime: Date;
+  packageUpdateMechanism: string;
+}
+
+export interface RootFolder {
+  id: number;
+  path: string;
+  freeSpace: number;
+  totalSpace: number;
+  unmappedFolders: {
+    name: string;
+    path: string;
+  }[];
+}
+
+export interface QualityProfile {
+  id: number;
+  name: string;
+}
+
+interface QueueItem {
+  size: number;
+  title: string;
+  sizeleft: number;
+  timeleft: string;
+  estimatedCompletionTime: string;
+  status: string;
+  trackedDownloadStatus: string;
+  trackedDownloadState: string;
+  downloadId: string;
+  protocol: string;
+  downloadClient: string;
+  indexer: string;
+  id: number;
+}
+
+export interface Tag {
+  id: number;
+  label: string;
+}
+
+interface QueueResponse<QueueItemAppendT> {
+  page: number;
+  pageSize: number;
+  sortKey: string;
+  sortDirection: string;
+  totalRecords: number;
+  records: (QueueItem & QueueItemAppendT)[];
+}
\ No newline at end of file
diff --git a/utils/jellyseerr/server/api/servarr/radarr.ts b/utils/jellyseerr/server/api/servarr/radarr.ts
new file mode 100644
index 00000000..d1e18bd1
--- /dev/null
+++ b/utils/jellyseerr/server/api/servarr/radarr.ts
@@ -0,0 +1,28 @@
+export interface RadarrMovieOptions {
+  title: string;
+  qualityProfileId: number;
+  minimumAvailability: string;
+  tags: number[];
+  profileId: number;
+  year: number;
+  rootFolderPath: string;
+  tmdbId: number;
+  monitored?: boolean;
+  searchNow?: boolean;
+}
+
+export interface RadarrMovie {
+  id: number;
+  title: string;
+  isAvailable: boolean;
+  monitored: boolean;
+  tmdbId: number;
+  imdbId: string;
+  titleSlug: string;
+  folderName: string;
+  path: string;
+  profileId: number;
+  qualityProfileId: number;
+  added: string;
+  hasFile: boolean;
+}
\ No newline at end of file
diff --git a/utils/jellyseerr/server/api/servarr/sonarr.ts b/utils/jellyseerr/server/api/servarr/sonarr.ts
new file mode 100644
index 00000000..9a0edf51
--- /dev/null
+++ b/utils/jellyseerr/server/api/servarr/sonarr.ts
@@ -0,0 +1,104 @@
+export interface SonarrSeason {
+  seasonNumber: number;
+  monitored: boolean;
+  statistics?: {
+    previousAiring?: string;
+    episodeFileCount: number;
+    episodeCount: number;
+    totalEpisodeCount: number;
+    sizeOnDisk: number;
+    percentOfEpisodes: number;
+  };
+}
+interface EpisodeResult {
+  seriesId: number;
+  episodeFileId: number;
+  seasonNumber: number;
+  episodeNumber: number;
+  title: string;
+  airDate: string;
+  airDateUtc: string;
+  overview: string;
+  hasFile: boolean;
+  monitored: boolean;
+  absoluteEpisodeNumber: number;
+  unverifiedSceneNumbering: boolean;
+  id: number;
+}
+
+export interface SonarrSeries {
+  title: string;
+  sortTitle: string;
+  seasonCount: number;
+  status: string;
+  overview: string;
+  network: string;
+  airTime: string;
+  images: {
+    coverType: string;
+    url: string;
+  }[];
+  remotePoster: string;
+  seasons: SonarrSeason[];
+  year: number;
+  path: string;
+  profileId: number;
+  languageProfileId: number;
+  seasonFolder: boolean;
+  monitored: boolean;
+  useSceneNumbering: boolean;
+  runtime: number;
+  tvdbId: number;
+  tvRageId: number;
+  tvMazeId: number;
+  firstAired: string;
+  lastInfoSync?: string;
+  seriesType: 'standard' | 'daily' | 'anime';
+  cleanTitle: string;
+  imdbId: string;
+  titleSlug: string;
+  certification: string;
+  genres: string[];
+  tags: number[];
+  added: string;
+  ratings: {
+    votes: number;
+    value: number;
+  };
+  qualityProfileId: number;
+  id?: number;
+  rootFolderPath?: string;
+  addOptions?: {
+    ignoreEpisodesWithFiles?: boolean;
+    ignoreEpisodesWithoutFiles?: boolean;
+    searchForMissingEpisodes?: boolean;
+  };
+  statistics: {
+    seasonCount: number;
+    episodeFileCount: number;
+    episodeCount: number;
+    totalEpisodeCount: number;
+    sizeOnDisk: number;
+    releaseGroups: string[];
+    percentOfEpisodes: number;
+  };
+}
+
+export interface AddSeriesOptions {
+  tvdbid: number;
+  title: string;
+  profileId: number;
+  languageProfileId?: number;
+  seasons: number[];
+  seasonFolder: boolean;
+  rootFolderPath: string;
+  tags?: number[];
+  seriesType: SonarrSeries['seriesType'];
+  monitored?: boolean;
+  searchNow?: boolean;
+}
+
+export interface LanguageProfile {
+  id: number;
+  name: string;
+}
\ No newline at end of file
diff --git a/utils/jellyseerr/server/interfaces/api/serviceInterfaces.ts b/utils/jellyseerr/server/interfaces/api/serviceInterfaces.ts
new file mode 100644
index 00000000..3b430b0b
--- /dev/null
+++ b/utils/jellyseerr/server/interfaces/api/serviceInterfaces.ts
@@ -0,0 +1,25 @@
+import type { QualityProfile, RootFolder, Tag } from '@server/api/servarr/base';
+import type { LanguageProfile } from '@server/api/servarr/sonarr';
+
+export interface ServiceCommonServer {
+  id: number;
+  name: string;
+  is4k: boolean;
+  isDefault: boolean;
+  activeProfileId: number;
+  activeDirectory: string;
+  activeLanguageProfileId?: number;
+  activeAnimeProfileId?: number;
+  activeAnimeDirectory?: string;
+  activeAnimeLanguageProfileId?: number;
+  activeTags: number[];
+  activeAnimeTags?: number[];
+}
+
+export interface ServiceCommonServerWithDetails {
+  server: ServiceCommonServer;
+  profiles: QualityProfile[];
+  rootFolders: Partial<RootFolder>[];
+  languageProfiles?: LanguageProfile[];
+  tags: Tag[];
+}
diff --git a/utils/jellyseerr/server/lib/settings/index.ts b/utils/jellyseerr/server/lib/settings/index.ts
new file mode 100644
index 00000000..83789c33
--- /dev/null
+++ b/utils/jellyseerr/server/lib/settings/index.ts
@@ -0,0 +1,297 @@
+export interface Library {
+  id: string;
+  name: string;
+  enabled: boolean;
+  type: 'show' | 'movie';
+  lastScan?: number;
+}
+
+export interface Region {
+  iso_3166_1: string;
+  english_name: string;
+  name?: string;
+}
+
+export interface Language {
+  iso_639_1: string;
+  english_name: string;
+  name: string;
+}
+
+export interface PlexSettings {
+  name: string;
+  machineId?: string;
+  ip: string;
+  port: number;
+  useSsl?: boolean;
+  libraries: Library[];
+  webAppUrl?: string;
+}
+
+export interface JellyfinSettings {
+  name: string;
+  ip: string;
+  port: number;
+  useSsl?: boolean;
+  urlBase?: string;
+  externalHostname?: string;
+  jellyfinForgotPasswordUrl?: string;
+  libraries: Library[];
+  serverId: string;
+  apiKey: string;
+}
+export interface TautulliSettings {
+  hostname?: string;
+  port?: number;
+  useSsl?: boolean;
+  urlBase?: string;
+  apiKey?: string;
+  externalUrl?: string;
+}
+
+export interface DVRSettings {
+  id: number;
+  name: string;
+  hostname: string;
+  port: number;
+  apiKey: string;
+  useSsl: boolean;
+  baseUrl?: string;
+  activeProfileId: number;
+  activeProfileName: string;
+  activeDirectory: string;
+  tags: number[];
+  is4k: boolean;
+  isDefault: boolean;
+  externalUrl?: string;
+  syncEnabled: boolean;
+  preventSearch: boolean;
+  tagRequests: boolean;
+}
+
+export interface RadarrSettings extends DVRSettings {
+  minimumAvailability: string;
+}
+
+export interface SonarrSettings extends DVRSettings {
+  seriesType: 'standard' | 'daily' | 'anime';
+  animeSeriesType: 'standard' | 'daily' | 'anime';
+  activeAnimeProfileId?: number;
+  activeAnimeProfileName?: string;
+  activeAnimeDirectory?: string;
+  activeAnimeLanguageProfileId?: number;
+  activeLanguageProfileId?: number;
+  animeTags?: number[];
+  enableSeasonFolders: boolean;
+}
+
+interface Quota {
+  quotaLimit?: number;
+  quotaDays?: number;
+}
+
+export interface ProxySettings {
+  enabled: boolean;
+  hostname: string;
+  port: number;
+  useSsl: boolean;
+  user: string;
+  password: string;
+  bypassFilter: string;
+  bypassLocalAddresses: boolean;
+}
+
+export interface MainSettings {
+  apiKey: string;
+  applicationTitle: string;
+  applicationUrl: string;
+  csrfProtection: boolean;
+  cacheImages: boolean;
+  defaultPermissions: number;
+  defaultQuotas: {
+    movie: Quota;
+    tv: Quota;
+  };
+  hideAvailable: boolean;
+  localLogin: boolean;
+  newPlexLogin: boolean;
+  region: string;
+  originalLanguage: string;
+  trustProxy: boolean;
+  mediaServerType: number;
+  partialRequestsEnabled: boolean;
+  locale: string;
+  proxy: ProxySettings;
+}
+
+interface PublicSettings {
+  initialized: boolean;
+}
+
+interface FullPublicSettings extends PublicSettings {
+  applicationTitle: string;
+  applicationUrl: string;
+  hideAvailable: boolean;
+  localLogin: boolean;
+  movie4kEnabled: boolean;
+  series4kEnabled: boolean;
+  region: string;
+  originalLanguage: string;
+  mediaServerType: number;
+  jellyfinExternalHost?: string;
+  jellyfinForgotPasswordUrl?: string;
+  jellyfinServerName?: string;
+  partialRequestsEnabled: boolean;
+  cacheImages: boolean;
+  vapidPublic: string;
+  enablePushRegistration: boolean;
+  locale: string;
+  emailEnabled: boolean;
+  userEmailRequired: boolean;
+  newPlexLogin: boolean;
+}
+
+export interface NotificationAgentConfig {
+  enabled: boolean;
+  types?: number;
+  options: Record<string, unknown>;
+}
+export interface NotificationAgentDiscord extends NotificationAgentConfig {
+  options: {
+    botUsername?: string;
+    botAvatarUrl?: string;
+    webhookUrl: string;
+    enableMentions: boolean;
+  };
+}
+
+export interface NotificationAgentSlack extends NotificationAgentConfig {
+  options: {
+    webhookUrl: string;
+  };
+}
+
+export interface NotificationAgentEmail extends NotificationAgentConfig {
+  options: {
+    userEmailRequired: boolean;
+    emailFrom: string;
+    smtpHost: string;
+    smtpPort: number;
+    secure: boolean;
+    ignoreTls: boolean;
+    requireTls: boolean;
+    authUser?: string;
+    authPass?: string;
+    allowSelfSigned: boolean;
+    senderName: string;
+    pgpPrivateKey?: string;
+    pgpPassword?: string;
+  };
+}
+
+export interface NotificationAgentLunaSea extends NotificationAgentConfig {
+  options: {
+    webhookUrl: string;
+    profileName?: string;
+  };
+}
+
+export interface NotificationAgentTelegram extends NotificationAgentConfig {
+  options: {
+    botUsername?: string;
+    botAPI: string;
+    chatId: string;
+    sendSilently: boolean;
+  };
+}
+
+export interface NotificationAgentPushbullet extends NotificationAgentConfig {
+  options: {
+    accessToken: string;
+    channelTag?: string;
+  };
+}
+
+export interface NotificationAgentPushover extends NotificationAgentConfig {
+  options: {
+    accessToken: string;
+    userToken: string;
+    sound: string;
+  };
+}
+
+export interface NotificationAgentWebhook extends NotificationAgentConfig {
+  options: {
+    webhookUrl: string;
+    jsonPayload: string;
+    authHeader?: string;
+  };
+}
+
+export interface NotificationAgentGotify extends NotificationAgentConfig {
+  options: {
+    url: string;
+    token: string;
+  };
+}
+
+export enum NotificationAgentKey {
+  DISCORD = 'discord',
+  EMAIL = 'email',
+  GOTIFY = 'gotify',
+  PUSHBULLET = 'pushbullet',
+  PUSHOVER = 'pushover',
+  SLACK = 'slack',
+  TELEGRAM = 'telegram',
+  WEBHOOK = 'webhook',
+  WEBPUSH = 'webpush',
+}
+
+interface NotificationAgents {
+  discord: NotificationAgentDiscord;
+  email: NotificationAgentEmail;
+  gotify: NotificationAgentGotify;
+  lunasea: NotificationAgentLunaSea;
+  pushbullet: NotificationAgentPushbullet;
+  pushover: NotificationAgentPushover;
+  slack: NotificationAgentSlack;
+  telegram: NotificationAgentTelegram;
+  webhook: NotificationAgentWebhook;
+  webpush: NotificationAgentConfig;
+}
+
+interface NotificationSettings {
+  agents: NotificationAgents;
+}
+
+interface JobSettings {
+  schedule: string;
+}
+
+export type JobId =
+  | 'plex-recently-added-scan'
+  | 'plex-full-scan'
+  | 'plex-watchlist-sync'
+  | 'radarr-scan'
+  | 'sonarr-scan'
+  | 'download-sync'
+  | 'download-sync-reset'
+  | 'jellyfin-recently-added-scan'
+  | 'jellyfin-full-scan'
+  | 'image-cache-cleanup'
+  | 'availability-sync';
+
+export interface AllSettings {
+  clientId: string;
+  vapidPublic: string;
+  vapidPrivate: string;
+  main: MainSettings;
+  plex: PlexSettings;
+  jellyfin: JellyfinSettings;
+  tautulli: TautulliSettings;
+  radarr: RadarrSettings[];
+  sonarr: SonarrSettings[];
+  public: PublicSettings;
+  notifications: NotificationSettings;
+  jobs: Record<JobId, JobSettings>;
+}
\ No newline at end of file
diff --git a/utils/jellyseerr/src/components/Discover/NetworkSlider/index.tsx b/utils/jellyseerr/src/components/Discover/NetworkSlider/index.tsx
new file mode 100644
index 00000000..dece30f2
--- /dev/null
+++ b/utils/jellyseerr/src/components/Discover/NetworkSlider/index.tsx
@@ -0,0 +1,142 @@
+export interface Network {
+  name: string;
+  image: string;
+  id: number;
+}
+
+export const COMPANY_LOGO_IMAGE_FILTER = 'w780_filter(duotone,ffffff,bababa)';
+
+export const networks: Network[] = [
+  {
+    name: 'Netflix',
+    image:
+      '/wwemzKWzjKYJFfCeiB57q3r4Bcm.png',
+    id: 213,
+  },
+  {
+    name: 'Disney+',
+    image:
+      '/gJ8VX6JSu3ciXHuC2dDGAo2lvwM.png',
+    id: 2739,
+  },
+  {
+    name: 'Prime Video',
+    image:
+      '/ifhbNuuVnlwYy5oXA5VIb2YR8AZ.png',
+    id: 1024,
+  },
+  {
+    name: 'Apple TV+',
+    image:
+      '/4KAy34EHvRM25Ih8wb82AuGU7zJ.png',
+    id: 2552,
+  },
+  {
+    name: 'Hulu',
+    image:
+      '/pqUTCleNUiTLAVlelGxUgWn1ELh.png',
+    id: 453,
+  },
+  {
+    name: 'HBO',
+    image:
+      '/tuomPhY2UtuPTqqFnKMVHvSb724.png',
+    id: 49,
+  },
+  {
+    name: 'Discovery+',
+    image:
+      '/1D1bS3Dyw4ScYnFWTlBOvJXC3nb.png',
+    id: 4353,
+  },
+  {
+    name: 'ABC',
+    image:
+      '/ndAvF4JLsliGreX87jAc9GdjmJY.png',
+    id: 2,
+  },
+  {
+    name: 'FOX',
+    image:
+      '/1DSpHrWyOORkL9N2QHX7Adt31mQ.png',
+    id: 19,
+  },
+  {
+    name: 'Cinemax',
+    image:
+      '/6mSHSquNpfLgDdv6VnOOvC5Uz2h.png',
+    id: 359,
+  },
+  {
+    name: 'AMC',
+    image:
+      '/pmvRmATOCaDykE6JrVoeYxlFHw3.png',
+    id: 174,
+  },
+  {
+    name: 'Showtime',
+    image:
+      '/Allse9kbjiP6ExaQrnSpIhkurEi.png',
+    id: 67,
+  },
+  {
+    name: 'Starz',
+    image:
+      '/8GJjw3HHsAJYwIWKIPBPfqMxlEa.png',
+    id: 318,
+  },
+  {
+    name: 'The CW',
+    image:
+      '/ge9hzeaU7nMtQ4PjkFlc68dGAJ9.png',
+    id: 71,
+  },
+  {
+    name: 'NBC',
+    image:
+      '/o3OedEP0f9mfZr33jz2BfXOUK5.png',
+    id: 6,
+  },
+  {
+    name: 'CBS',
+    image:
+      '/nm8d7P7MJNiBLdgIzUK0gkuEA4r.png',
+    id: 16,
+  },
+  {
+    name: 'Paramount+',
+    image:
+      '/fi83B1oztoS47xxcemFdPMhIzK.png',
+    id: 4330,
+  },
+  {
+    name: 'BBC One',
+    image:
+      '/mVn7xESaTNmjBUyUtGNvDQd3CT1.png',
+    id: 4,
+  },
+  {
+    name: 'Cartoon Network',
+    image:
+      '/c5OC6oVCg6QP4eqzW6XIq17CQjI.png',
+    id: 56,
+  },
+  {
+    name: 'Adult Swim',
+    image:
+      '/9AKyspxVzywuaMuZ1Bvilu8sXly.png',
+    id: 80,
+  },
+  {
+    name: 'Nickelodeon',
+    image:
+      '/ikZXxg6GnwpzqiZbRPhJGaZapqB.png',
+    id: 13,
+  },
+  {
+    name: 'Peacock',
+    image:
+      '/gIAcGTjKKr0KOHL5s4O36roJ8p7.png',
+    id: 3353,
+  },
+];
\ No newline at end of file
diff --git a/utils/jellyseerr/src/components/Discover/StudioSlider/index.tsx b/utils/jellyseerr/src/components/Discover/StudioSlider/index.tsx
new file mode 100644
index 00000000..395def55
--- /dev/null
+++ b/utils/jellyseerr/src/components/Discover/StudioSlider/index.tsx
@@ -0,0 +1,68 @@
+export interface Studio {
+  name: string;
+  image: string;
+  id: number;
+}
+
+export const studios: Studio[] = [
+  {
+    name: 'Disney',
+    image:
+      '/wdrCwmRnLFJhEoH8GSfymY85KHT.png',
+    id: 2,
+  },
+  {
+    name: '20th Century Studios',
+    image:
+      '/h0rjX5vjW5r8yEnUBStFarjcLT4.png',
+    id: 127928,
+  },
+  {
+    name: 'Sony Pictures',
+    image:
+      '/GagSvqWlyPdkFHMfQ3pNq6ix9P.png',
+    id: 34,
+  },
+  {
+    name: 'Warner Bros. Pictures',
+    image:
+      '/ky0xOc5OrhzkZ1N6KyUxacfQsCk.png',
+    id: 174,
+  },
+  {
+    name: 'Universal',
+    image:
+      '/8lvHyhjr8oUKOOy2dKXoALWKdp0.png',
+    id: 33,
+  },
+  {
+    name: 'Paramount',
+    image:
+      '/fycMZt242LVjagMByZOLUGbCvv3.png',
+    id: 4,
+  },
+  {
+    name: 'Pixar',
+    image:
+      '/1TjvGVDMYsj6JBxOAkUHpPEwLf7.png',
+    id: 3,
+  },
+  {
+    name: 'Dreamworks',
+    image:
+      '/kP7t6RwGz2AvvTkvnI1uteEwHet.png',
+    id: 521,
+  },
+  {
+    name: 'Marvel Studios',
+    image:
+      '/hUzeosd33nzE5MCNsZxCGEKTXaQ.png',
+    id: 420,
+  },
+  {
+    name: 'DC',
+    image:
+      '/2Tc1P3Ac8M479naPp1kYT3izLS5.png',
+    id: 9993,
+  },
+];
diff --git a/utils/jellyseerr/src/components/Discover/constants.ts b/utils/jellyseerr/src/components/Discover/constants.ts
new file mode 100644
index 00000000..5b43bc14
--- /dev/null
+++ b/utils/jellyseerr/src/components/Discover/constants.ts
@@ -0,0 +1,63 @@
+type AvailableColors =
+  | 'black'
+  | 'red'
+  | 'darkred'
+  | 'blue'
+  | 'lightblue'
+  | 'darkblue'
+  | 'orange'
+  | 'darkorange'
+  | 'green'
+  | 'lightgreen'
+  | 'purple'
+  | 'darkpurple'
+  | 'yellow'
+  | 'pink';
+
+export const colorTones: Record<AvailableColors, [string, string]> = {
+  red: ['991B1B', 'FCA5A5'],
+  darkred: ['1F2937', 'F87171'],
+  blue: ['032541', '01b4e4'],
+  lightblue: ['1F2937', '60A5FA'],
+  darkblue: ['1F2937', '2864d2'],
+  orange: ['92400E', 'FCD34D'],
+  lightgreen: ['065F46', '6EE7B7'],
+  green: ['087d29', '21cb51'],
+  purple: ['5B21B6', 'C4B5FD'],
+  yellow: ['777e0d', 'e4ed55'],
+  darkorange: ['552c01', 'd47c1d'],
+  black: ['1F2937', 'D1D5DB'],
+  pink: ['9D174D', 'F9A8D4'],
+  darkpurple: ['480c8b', 'a96bef'],
+};
+
+export const genreColorMap: Record<number, [string, string]> = {
+  0: colorTones.black,
+  28: colorTones.red, // Action
+  12: colorTones.darkpurple, // Adventure
+  16: colorTones.blue, // Animation
+  35: colorTones.orange, // Comedy
+  80: colorTones.darkblue, // Crime
+  99: colorTones.lightgreen, // Documentary
+  18: colorTones.pink, // Drama
+  10751: colorTones.yellow, // Family
+  14: colorTones.lightblue, // Fantasy
+  36: colorTones.orange, // History
+  27: colorTones.black, // Horror
+  10402: colorTones.blue, // Music
+  9648: colorTones.purple, // Mystery
+  10749: colorTones.pink, // Romance
+  878: colorTones.lightblue, // Science Fiction
+  10770: colorTones.red, // TV Movie
+  53: colorTones.black, // Thriller
+  10752: colorTones.darkred, // War
+  37: colorTones.orange, // Western
+  10759: colorTones.darkpurple, // Action & Adventure
+  10762: colorTones.blue, // Kids
+  10763: colorTones.black, // News
+  10764: colorTones.darkorange, // Reality
+  10765: colorTones.lightblue, // Sci-Fi & Fantasy
+  10766: colorTones.pink, // Soap
+  10767: colorTones.lightgreen, // Talk
+  10768: colorTones.darkred, // War & Politics
+};
\ No newline at end of file
diff --git a/utils/jellyseerr/src/components/RequestModal/AdvancedRequester/index.tsx b/utils/jellyseerr/src/components/RequestModal/AdvancedRequester/index.tsx
new file mode 100644
index 00000000..64c40e15
--- /dev/null
+++ b/utils/jellyseerr/src/components/RequestModal/AdvancedRequester/index.tsx
@@ -0,0 +1,19 @@
+import {User} from "../../../../server/entity/User";
+
+export type RequestOverrides = {
+  server?: number;
+  profile?: number;
+  folder?: string;
+  tags?: number[];
+  language?: number;
+  user?: User;
+};
+
+interface AdvancedRequesterProps {
+  type: 'movie' | 'tv';
+  is4k: boolean;
+  isAnime?: boolean;
+  defaultOverrides?: RequestOverrides;
+  requestUser?: User;
+  onChange: (overrides: RequestOverrides) => void;
+}
\ No newline at end of file
