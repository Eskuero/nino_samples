diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 0da59234da..f6a09dbd4c 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -25,6 +25,8 @@ import extension.locales
 import extension.setupAnvil
 import extension.setupKover
 import java.util.Locale
+import java.time.LocalDateTime
+import java.time.Duration;
 
 plugins {
     id("io.element.android-compose-application")
@@ -50,11 +52,6 @@ android {
         versionCode = Versions.VERSION_CODE
         versionName = Versions.VERSION_NAME
 
-        // Keep abiFilter for the universalApk
-        ndk {
-            abiFilters += listOf("armeabi-v7a", "x86", "arm64-v8a", "x86_64")
-        }
-
         // Ref: https://developer.android.com/studio/build/configure-apk-splits.html#configure-abi-split
         splits {
             // Configures multiple APKs based on ABI.
@@ -71,9 +68,9 @@ android {
 
                 if (!buildingAppBundle) {
                     // Specifies a list of ABIs that Gradle should create APKs for.
-                    include("armeabi-v7a", "x86", "arm64-v8a", "x86_64")
+                    include("arm64-v8a")
                     // Generate a universal APK that includes all ABIs, so user who installs from CI tool can use this one by default.
-                    isUniversalApk = true
+                    isUniversalApk = false
                 }
             }
         }
@@ -113,7 +110,6 @@ android {
 
         getByName("release") {
             resValue("string", "app_name", baseAppName)
-            signingConfig = signingConfigs.getByName("debug")
 
             postprocessing {
                 isRemoveUnusedCode = true
@@ -192,6 +188,10 @@ androidComponents {
         "x86_64" to 4,
     )
 
+    val d1 = LocalDateTime.of(2021, 12, 31, 23, 59);
+    val d2 = LocalDateTime.now()
+    val minutes = Duration.between(d1, d2).getSeconds() / 60
+    val DateVersionCode = (2112312359 + minutes).toInt()
     onVariants { variant ->
         // Assigns a different version code for each output APK
         // other than the universal APK.
@@ -202,7 +202,7 @@ androidComponents {
             val abiCode = abiVersionCodes[name] ?: 0
             // Assigns the new version code to output.versionCode, which changes the version code
             // for only the output APK, not for the variant itself.
-            output.versionCode.set((output.versionCode.orNull ?: 0) * 10 + abiCode)
+            output.versionCode.set(DateVersionCode + abiCode)
         }
     }
 
@@ -299,6 +299,7 @@ licensee {
     allow("Apache-2.0")
     allow("MIT")
     allow("BSD-2-Clause")
+    allow("BSD-3-Clause")
     allowUrl("https://opensource.org/licenses/MIT")
     allowUrl("https://developer.android.com/studio/terms.html")
     allowUrl("https://www.zetetic.net/sqlcipher/license/")
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index a293b34b65..6d8a2f286e 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -182,7 +182,7 @@ sqldelight-driver-jvm = { module = "app.cash.sqldelight:sqlite-driver", version.
 sqldelight-coroutines = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }
 sqlcipher = "net.zetetic:android-database-sqlcipher:4.5.4"
 sqlite = "androidx.sqlite:sqlite-ktx:2.4.0"
-unifiedpush = "com.github.UnifiedPush:android-connector:2.4.0"
+unifiedpush = "org.unifiedpush.android:connector:3.0.4"
 otaliastudios_transcoder = "com.otaliastudios:transcoder:0.11.2"
 vanniktech_blurhash = "com.vanniktech:blurhash:0.3.0"
 telephoto_zoomableimage = { module = "me.saket.telephoto:zoomable-image-coil", version.ref = "telephoto" }
diff --git a/libraries/pushproviders/unifiedpush/build.gradle.kts b/libraries/pushproviders/unifiedpush/build.gradle.kts
index 1dec445c00..2cbf68c6d4 100644
--- a/libraries/pushproviders/unifiedpush/build.gradle.kts
+++ b/libraries/pushproviders/unifiedpush/build.gradle.kts
@@ -42,7 +42,13 @@ dependencies {
     implementation(libs.serialization.json)
 
     // UnifiedPush library
-    api(libs.unifiedpush)
+    implementation(libs.unifiedpush) {
+        // Exclude package com.google.crypto.tink
+        // Duplicate classes between
+        // tink-1.16.0.jar -> tink-1.16.0 (com.google.crypto.tink:tink:1.16.0)
+        // tink-android-1.8.0.jar tink-android-1.8.0 (com.google.crypto.tink:tink-android:1.8.0)
+        exclude(group = "com.google.crypto.tink", module = "tink")
+    }
 
     testImplementation(libs.coroutines.test)
     testImplementation(libs.test.junit)
diff --git a/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/RegisterUnifiedPushUseCase.kt b/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/RegisterUnifiedPushUseCase.kt
index dc32dbff76..5df7c1e5c3 100644
--- a/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/RegisterUnifiedPushUseCase.kt
+++ b/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/RegisterUnifiedPushUseCase.kt
@@ -33,7 +33,7 @@ class DefaultRegisterUnifiedPushUseCase @Inject constructor(
         UnifiedPush.saveDistributor(context, distributor.value)
         // This will trigger the callback
         // VectorUnifiedPushMessagingReceiver.onNewEndpoint
-        UnifiedPush.registerApp(context = context, instance = clientSecret)
+        UnifiedPush.register(context = context, instance = clientSecret)
         // Wait for VectorUnifiedPushMessagingReceiver.onNewEndpoint to proceed
         return runCatching {
             withTimeout(30.seconds) {
diff --git a/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/UnregisterUnifiedPushUseCase.kt b/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/UnregisterUnifiedPushUseCase.kt
index e41aa6a51f..24b9676c11 100644
--- a/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/UnregisterUnifiedPushUseCase.kt
+++ b/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/UnregisterUnifiedPushUseCase.kt
@@ -53,6 +53,6 @@ class DefaultUnregisterUnifiedPushUseCase @Inject constructor(
     override fun cleanup(clientSecret: String) {
         unifiedPushStore.storeUpEndpoint(clientSecret, null)
         unifiedPushStore.storePushGateway(clientSecret, null)
-        UnifiedPush.unregisterApp(context, clientSecret)
+        UnifiedPush.unregister(context, clientSecret)
     }
 }
diff --git a/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiver.kt b/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiver.kt
index 2e48574de1..213e7a1c13 100644
--- a/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiver.kt
+++ b/libraries/pushproviders/unifiedpush/src/main/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiver.kt
@@ -16,7 +16,10 @@ import io.element.android.libraries.pushproviders.unifiedpush.registration.Endpo
 import io.element.android.libraries.pushproviders.unifiedpush.registration.RegistrationResult
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.launch
+import org.unifiedpush.android.connector.FailedReason
 import org.unifiedpush.android.connector.MessagingReceiver
+import org.unifiedpush.android.connector.data.PushEndpoint
+import org.unifiedpush.android.connector.data.PushMessage
 import timber.log.Timber
 import javax.inject.Inject
 
@@ -45,10 +48,10 @@ class VectorUnifiedPushMessagingReceiver : MessagingReceiver() {
      * @param message the message
      * @param instance connection, for multi-account
      */
-    override fun onMessage(context: Context, message: ByteArray, instance: String) {
-        Timber.tag(loggerTag.value).d("New message")
+    override fun onMessage(context: Context, message: PushMessage, instance: String) {
+        Timber.tag(loggerTag.value).d("New message, decrypted: ${message.decrypted}")
         coroutineScope.launch {
-            val pushData = pushParser.parse(message, instance)
+            val pushData = pushParser.parse(message.content, instance)
             if (pushData == null) {
                 Timber.tag(loggerTag.value).w("Invalid data received from UnifiedPush")
             } else {
@@ -61,20 +64,20 @@ class VectorUnifiedPushMessagingReceiver : MessagingReceiver() {
      * Called when a new endpoint is to be used for sending push messages.
      * You should send the endpoint to your application server and sync for missing notifications.
      */
-    override fun onNewEndpoint(context: Context, endpoint: String, instance: String) {
+    override fun onNewEndpoint(context: Context, endpoint: PushEndpoint, instance: String) {
         Timber.tag(loggerTag.value).i("onNewEndpoint: $endpoint")
         coroutineScope.launch {
-            val gateway = unifiedPushGatewayResolver.getGateway(endpoint)
+            val gateway = unifiedPushGatewayResolver.getGateway(endpoint.url)
                 .let { gatewayResult ->
                     unifiedPushGatewayUrlResolver.resolve(gatewayResult, instance)
                 }
             unifiedPushStore.storePushGateway(instance, gateway)
-            val result = newGatewayHandler.handle(endpoint, gateway, instance)
+            val result = newGatewayHandler.handle(endpoint.url, gateway, instance)
                 .onFailure {
                     Timber.tag(loggerTag.value).e(it, "Failed to handle new gateway")
                 }
                 .onSuccess {
-                    unifiedPushStore.storeUpEndpoint(instance, endpoint)
+                    unifiedPushStore.storeUpEndpoint(instance, endpoint.url)
                 }
             endpointRegistrationHandler.registrationDone(
                 RegistrationResult(
@@ -89,8 +92,8 @@ class VectorUnifiedPushMessagingReceiver : MessagingReceiver() {
     /**
      * Called when the registration is not possible, eg. no network.
      */
-    override fun onRegistrationFailed(context: Context, instance: String) {
-        Timber.tag(loggerTag.value).e("onRegistrationFailed for $instance")
+    override fun onRegistrationFailed(context: Context, reason: FailedReason, instance: String) {
+        Timber.tag(loggerTag.value).e("onRegistrationFailed for $instance, reason: $reason")
         /*
         Toast.makeText(context, "Push service registration failed", Toast.LENGTH_SHORT).show()
         val mode = BackgroundSyncMode.FDROID_BACKGROUND_SYNC_MODE_FOR_REALTIME
@@ -103,7 +106,7 @@ class VectorUnifiedPushMessagingReceiver : MessagingReceiver() {
      * Called when this application is unregistered from receiving push messages.
      */
     override fun onUnregistered(context: Context, instance: String) {
-        Timber.tag(loggerTag.value).d("Unifiedpush: Unregistered")
+        Timber.tag(loggerTag.value).d("UnifiedPush: Unregistered")
         /*
         val mode = BackgroundSyncMode.FDROID_BACKGROUND_SYNC_MODE_FOR_REALTIME
         pushDataStore.setFdroidSyncBackgroundMode(mode)
diff --git a/libraries/pushproviders/unifiedpush/src/test/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiverTest.kt b/libraries/pushproviders/unifiedpush/src/test/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiverTest.kt
index 69502f020e..8cad5d0720 100644
--- a/libraries/pushproviders/unifiedpush/src/test/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiverTest.kt
+++ b/libraries/pushproviders/unifiedpush/src/test/kotlin/io/element/android/libraries/pushproviders/unifiedpush/VectorUnifiedPushMessagingReceiverTest.kt
@@ -32,6 +32,10 @@ import org.junit.Assert.assertThrows
 import org.junit.Test
 import org.junit.runner.RunWith
 import org.robolectric.RobolectricTestRunner
+import org.unifiedpush.android.connector.FailedReason
+import org.unifiedpush.android.connector.data.PublicKeySet
+import org.unifiedpush.android.connector.data.PushEndpoint
+import org.unifiedpush.android.connector.data.PushMessage
 
 @RunWith(RobolectricTestRunner::class)
 class VectorUnifiedPushMessagingReceiverTest {
@@ -56,7 +60,7 @@ class VectorUnifiedPushMessagingReceiverTest {
     fun `onRegistrationFailed does nothing`() = runTest {
         val context = InstrumentationRegistry.getInstrumentation().context
         val vectorUnifiedPushMessagingReceiver = createVectorUnifiedPushMessagingReceiver()
-        vectorUnifiedPushMessagingReceiver.onRegistrationFailed(context, A_SECRET)
+        vectorUnifiedPushMessagingReceiver.onRegistrationFailed(context, FailedReason.NETWORK, A_SECRET)
     }
 
     @Test
@@ -68,7 +72,7 @@ class VectorUnifiedPushMessagingReceiverTest {
                 handleResult = pushHandlerResult
             ),
         )
-        vectorUnifiedPushMessagingReceiver.onMessage(context, UnifiedPushParserTest.UNIFIED_PUSH_DATA.toByteArray(), A_SECRET)
+        vectorUnifiedPushMessagingReceiver.onMessage(context, aPushMessage(), A_SECRET)
         advanceUntilIdle()
         pushHandlerResult.assertions()
             .isCalledOnce()
@@ -93,7 +97,7 @@ class VectorUnifiedPushMessagingReceiverTest {
                 handleResult = pushHandlerResult
             ),
         )
-        vectorUnifiedPushMessagingReceiver.onMessage(context, "".toByteArray(), A_SECRET)
+        vectorUnifiedPushMessagingReceiver.onMessage(context, aPushMessage(""), A_SECRET)
         advanceUntilIdle()
         pushHandlerResult.assertions()
             .isNeverCalled()
@@ -125,7 +129,7 @@ class VectorUnifiedPushMessagingReceiverTest {
             unifiedPushNewGatewayHandler = unifiedPushNewGatewayHandler,
         )
         endpointRegistrationHandler.state.test {
-            vectorUnifiedPushMessagingReceiver.onNewEndpoint(context, "anEndpoint", A_SECRET)
+            vectorUnifiedPushMessagingReceiver.onNewEndpoint(context, aPushEndpoint("anEndpoint"), A_SECRET)
             advanceUntilIdle()
             assertThat(awaitItem()).isEqualTo(
                 RegistrationResult(
@@ -168,7 +172,7 @@ class VectorUnifiedPushMessagingReceiverTest {
             unifiedPushNewGatewayHandler = unifiedPushNewGatewayHandler,
         )
         endpointRegistrationHandler.state.test {
-            vectorUnifiedPushMessagingReceiver.onNewEndpoint(context, "anEndpoint", A_SECRET)
+            vectorUnifiedPushMessagingReceiver.onNewEndpoint(context, aPushEndpoint(), A_SECRET)
             advanceUntilIdle()
             assertThat(awaitItem()).isEqualTo(
                 RegistrationResult(
@@ -205,3 +209,19 @@ class VectorUnifiedPushMessagingReceiverTest {
         }
     }
 }
+
+private fun aPushMessage(
+    data: String = UnifiedPushParserTest.UNIFIED_PUSH_DATA,
+    decrypted: Boolean = true,
+) = PushMessage(
+    content = data.toByteArray(),
+    decrypted = decrypted,
+)
+
+private fun aPushEndpoint(
+    url: String = "anEndpoint",
+    pubKeySet: PublicKeySet? = null,
+) = PushEndpoint(
+    url = url,
+    pubKeySet = pubKeySet,
+)
diff --git a/settings.gradle.kts b/settings.gradle.kts
index d63017992f..e594999bd8 100644
--- a/settings.gradle.kts
+++ b/settings.gradle.kts
@@ -39,7 +39,6 @@ dependencyResolutionManagement {
         maven {
             url = URI("https://www.jitpack.io")
             content {
-                includeModule("com.github.UnifiedPush", "android-connector")
                 includeModule("com.github.matrix-org", "matrix-analytics-events")
             }
         }
