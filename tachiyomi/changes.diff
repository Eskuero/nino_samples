diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 2fbfc6161..8e6ad08e9 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -1,4 +1,7 @@
 import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
+import com.android.build.api.variant.FilterConfiguration.FilterType.*
+import java.time.LocalDateTime
+import java.time.Duration;
 
 plugins {
     id("com.android.application")
@@ -38,10 +41,6 @@ android {
         // Please disable ACRA or use your own instance in forked versions of the project
         buildConfigField("String", "ACRA_URI", "\"https://tachiyomi.kanade.eu/crash_report\"")
 
-        ndk {
-            abiFilters += SUPPORTED_ABIS
-        }
-
         testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
     }
 
@@ -50,7 +49,7 @@ android {
             isEnable = true
             reset()
             include(*SUPPORTED_ABIS.toTypedArray())
-            isUniversalApk = true
+            isUniversalApk = false
         }
     }
 
@@ -144,6 +143,23 @@ android {
             dialect = "sqlite:3.24"
         }
     }
+
+    val d1 = LocalDateTime.of(2021, 12, 31, 23, 59);
+    val d2 = LocalDateTime.now()
+    val minutes = Duration.between(d1, d2).getSeconds() / 60
+    val DateVersionCode = (2112312359 + minutes).toInt()
+    val abiCodes = mapOf("armeabi-v7a" to 1, "arm64-v8a" to 2, "x86" to 3, "x86_64" to 4)
+    androidComponents {
+        onVariants { variant ->
+            variant.outputs.forEach { output ->
+                val name = output.filters.find { it.filterType == ABI }?.identifier
+                val baseAbiCode = abiCodes[name]
+                if (baseAbiCode != null) {
+                    output.versionCode.set(baseAbiCode + DateVersionCode)
+                }
+            }
+        }
+    }
 }
 
 dependencies {
diff --git a/app/src/main/java/eu/kanade/presentation/components/ChapterDownloadIndicator.kt b/app/src/main/java/eu/kanade/presentation/components/ChapterDownloadIndicator.kt
index b8967ee84..11eb812e0 100644
--- a/app/src/main/java/eu/kanade/presentation/components/ChapterDownloadIndicator.kt
+++ b/app/src/main/java/eu/kanade/presentation/components/ChapterDownloadIndicator.kt
@@ -60,8 +60,8 @@ fun ChapterDownloadIndicator(
                 },
             ) {
                 val indicatorModifier = Modifier
-                        .size(IndicatorSize)
-                        .padding(IndicatorPadding)
+                    .size(IndicatorSize)
+                    .padding(IndicatorPadding)
                 if (isDownloaded) {
                     Icon(
                         imageVector = Icons.Default.CheckCircle,
@@ -151,5 +151,6 @@ fun ChapterDownloadIndicator(
 
 private val IndicatorSize = 26.dp
 private val IndicatorPadding = 2.dp
+
 // To match composable parameter name when used later
 private val IndicatorStrokeWidth = IndicatorPadding
