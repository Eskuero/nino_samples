diff --git a/komelia-app/build.gradle.kts b/komelia-app/build.gradle.kts
index dfad1c2..143a9f1 100644
--- a/komelia-app/build.gradle.kts
+++ b/komelia-app/build.gradle.kts
@@ -5,6 +5,8 @@ import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi
 import org.jetbrains.kotlin.gradle.ExperimentalWasmDsl
 import org.jetbrains.kotlin.gradle.dsl.JvmTarget
 import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig
+import java.time.LocalDateTime
+import java.time.Duration;
 
 plugins {
     alias(libs.plugins.kotlinMultiplatform)
@@ -104,6 +106,17 @@ android {
         sourceCompatibility = JavaVersion.VERSION_17
         targetCompatibility = JavaVersion.VERSION_17
     }
+    val d1 = LocalDateTime.of(2021, 12, 31, 23, 59);
+    val d2 = LocalDateTime.now()
+    val minutes = Duration.between(d1, d2).getSeconds() / 60
+    val DateVersionCode = (2112312359 + minutes).toInt()
+    androidComponents {
+        onVariants { variant ->
+            variant.outputs.forEach { output ->
+                output.versionCode.set(DateVersionCode)
+            }
+        }
+    }
 }
 
 
Submodule third_party/ChipTextField 2d6293d..1543eae (rewind):
diff --git a/third_party/ChipTextField/chiptextfield-core/build.gradle b/third_party/ChipTextField/chiptextfield-core/build.gradle
index c39eaba..54b3610 100644
--- a/third_party/ChipTextField/chiptextfield-core/build.gradle
+++ b/third_party/ChipTextField/chiptextfield-core/build.gradle
@@ -28,7 +28,7 @@ android {
 }
 
 kotlin {
-    jvmToolchain(17)
+    jvmToolchain(11)
 
     jvm()
 //    iosX64()
diff --git a/third_party/ChipTextField/chiptextfield-m3/build.gradle b/third_party/ChipTextField/chiptextfield-m3/build.gradle
index 5dbc916..4457039 100644
--- a/third_party/ChipTextField/chiptextfield-m3/build.gradle
+++ b/third_party/ChipTextField/chiptextfield-m3/build.gradle
@@ -28,7 +28,7 @@ android {
 }
 
 kotlin {
-    jvmToolchain(17)
+    jvmToolchain(11)
 
     jvm()
 //    iosX64()
diff --git a/third_party/ChipTextField/chiptextfield/build.gradle b/third_party/ChipTextField/chiptextfield/build.gradle
index 47b6499..5fc0c78 100644
--- a/third_party/ChipTextField/chiptextfield/build.gradle
+++ b/third_party/ChipTextField/chiptextfield/build.gradle
@@ -28,7 +28,7 @@ android {
 }
 
 kotlin {
-    jvmToolchain(17)
+    jvmToolchain(11)
 
     jvm()
 //    iosX64()
Submodule third_party/compose-sonner f827159..8a3d2fe (rewind):
diff --git a/third_party/compose-sonner/sample/build.gradle.kts b/third_party/compose-sonner/sample/build.gradle.kts
new file mode 100644
index 0000000..f9ce6c1
--- /dev/null
+++ b/third_party/compose-sonner/sample/build.gradle.kts
@@ -0,0 +1,122 @@
+import org.jetbrains.compose.ExperimentalComposeLibrary
+import org.jetbrains.compose.desktop.application.dsl.TargetFormat
+import org.jetbrains.kotlin.gradle.targets.js.dsl.ExperimentalWasmDsl
+
+plugins {
+    alias(libs.plugins.kotlinMultiplatform)
+    alias(libs.plugins.androidApplication)
+    alias(libs.plugins.jetbrainsCompose)
+    alias(libs.plugins.compose.compiler)
+}
+
+kotlin {
+    @OptIn(ExperimentalWasmDsl::class)
+    wasmJs {
+        moduleName = "composeApp"
+        browser {
+            commonWebpackConfig {
+                outputFileName = "composeApp.js"
+            }
+        }
+        binaries.executable()
+    }
+
+    js(IR) {
+        moduleName = "composeApp-jscanvas"
+        browser {
+            commonWebpackConfig {
+                outputFileName = "composeApp-jscanvas.js"
+            }
+        }
+        binaries.executable()
+    }
+    
+    androidTarget {
+        compilations.all {
+            kotlinOptions {
+                jvmTarget = "11"
+            }
+        }
+    }
+
+    listOf(
+        iosX64(),
+        iosArm64(),
+        iosSimulatorArm64()
+    ).forEach {
+        it.binaries.framework {
+            baseName = "sample"
+            isStatic = true
+        }
+    }
+    
+    jvm("desktop")
+    
+    sourceSets {
+        val desktopMain by getting
+        
+        androidMain.dependencies {
+            implementation(libs.compose.ui.tooling.preview)
+            implementation(libs.androidx.activity.compose)
+        }
+        commonMain.dependencies {
+            implementation(compose.runtime)
+            implementation(compose.foundation)
+            implementation(compose.material3)
+            implementation(compose.ui)
+            @OptIn(ExperimentalComposeLibrary::class)
+            implementation(compose.components.resources)
+            implementation(projects.sonner)
+        }
+        desktopMain.dependencies {
+            implementation(compose.desktop.currentOs)
+        }
+    }
+}
+
+android {
+    namespace = "com.dokar.sonner.sample"
+    compileSdk = libs.versions.android.compileSdk.get().toInt()
+
+    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
+    sourceSets["main"].res.srcDirs("src/androidMain/res")
+    sourceSets["main"].resources.srcDirs("src/commonMain/resources")
+
+    defaultConfig {
+        applicationId = "com.dokar.sonner.sample"
+        minSdk = libs.versions.android.minSdk.get().toInt()
+        targetSdk = libs.versions.android.targetSdk.get().toInt()
+        versionCode = 1
+        versionName = "1.0"
+    }
+    packaging {
+        resources {
+            excludes += "/META-INF/{AL2.0,LGPL2.1}"
+        }
+    }
+    buildTypes {
+        getByName("release") {
+            isMinifyEnabled = false
+            signingConfig = signingConfigs.getByName("debug")
+        }
+    }
+    compileOptions {
+        sourceCompatibility = JavaVersion.VERSION_11
+        targetCompatibility = JavaVersion.VERSION_11
+    }
+    dependencies {
+        debugImplementation(libs.compose.ui.tooling)
+    }
+}
+
+compose.desktop {
+    application {
+        mainClass = "com.dokar.sonner.sample.MainKt"
+
+        nativeDistributions {
+            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)
+            packageName = "com.dokar.sonner.sample"
+            packageVersion = "1.0.0"
+        }
+    }
+}
diff --git a/third_party/compose-sonner/sample/src/androidMain/AndroidManifest.xml b/third_party/compose-sonner/sample/src/androidMain/AndroidManifest.xml
new file mode 100644
index 0000000..b87d944
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/AndroidManifest.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@android:style/Theme.Material.Light.NoActionBar">
+        <activity
+            android:exported="true"
+            android:configChanges="orientation|screenSize|screenLayout|keyboardHidden|mnc|colorMode|density|fontScale|fontWeightAdjustment|keyboard|layoutDirection|locale|mcc|navigation|smallestScreenSize|touchscreen|uiMode"
+            android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/third_party/compose-sonner/sample/src/androidMain/kotlin/com/dokar/sonner/sample/MainActivity.kt b/third_party/compose-sonner/sample/src/androidMain/kotlin/com/dokar/sonner/sample/MainActivity.kt
new file mode 100644
index 0000000..b720c2e
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/kotlin/com/dokar/sonner/sample/MainActivity.kt
@@ -0,0 +1,24 @@
+package com.dokar.sonner.sample
+
+import com.dokar.sonner.sample.SampleScreen
+import android.os.Bundle
+import androidx.activity.ComponentActivity
+import androidx.activity.compose.setContent
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.tooling.preview.Preview
+
+class MainActivity : ComponentActivity() {
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        setContent {
+            SampleScreen()
+        }
+    }
+}
+
+@Preview
+@Composable
+fun AppAndroidPreview() {
+    SampleScreen()
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/androidMain/kotlin/com/dokar/sonner/sample/Platform.android.kt b/third_party/compose-sonner/sample/src/androidMain/kotlin/com/dokar/sonner/sample/Platform.android.kt
new file mode 100644
index 0000000..2b091b6
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/kotlin/com/dokar/sonner/sample/Platform.android.kt
@@ -0,0 +1,26 @@
+package com.dokar.sonner.sample
+
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.platform.LocalContext
+
+@Composable
+actual fun rememberLinkOpener(): LinkOpener {
+    val context = LocalContext.current
+    return remember(context) { AndroidLinkOpener(context) }
+}
+
+private class AndroidLinkOpener(private val context: Context) : LinkOpener {
+    override fun open(url: String) {
+        val intent = Intent(Intent.ACTION_VIEW)
+        intent.setData(Uri.parse(url))
+        try {
+            context.startActivity(intent)
+        } catch (e: Exception) {
+            // Ignore
+        }
+    }
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/drawable-v24/ic_launcher_foreground.xml b/third_party/compose-sonner/sample/src/androidMain/res/drawable-v24/ic_launcher_foreground.xml
new file mode 100644
index 0000000..2b068d1
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/res/drawable-v24/ic_launcher_foreground.xml
@@ -0,0 +1,30 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="85.84757"
+                android:endY="92.4963"
+                android:startX="42.9492"
+                android:startY="49.59793"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
+        android:strokeWidth="1"
+        android:strokeColor="#00000000" />
+</vector>
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/drawable/ic_launcher_background.xml b/third_party/compose-sonner/sample/src/androidMain/res/drawable/ic_launcher_background.xml
new file mode 100644
index 0000000..07d5da9
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/res/drawable/ic_launcher_background.xml
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path
+        android:fillColor="#3DDC84"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+</vector>
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-anydpi-v26/ic_launcher.xml b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-anydpi-v26/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-anydpi-v26/ic_launcher_round.xml b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-anydpi-v26/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-hdpi/ic_launcher.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000..a571e60
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-hdpi/ic_launcher_round.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 0000000..61da551
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-mdpi/ic_launcher.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000..c41dd28
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-mdpi/ic_launcher_round.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 0000000..db5080a
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xhdpi/ic_launcher.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..6dba46d
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xhdpi/ic_launcher_round.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 0000000..da31a87
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxhdpi/ic_launcher.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..15ac681
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxhdpi/ic_launcher_round.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000..b216f2d
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxxhdpi/ic_launcher.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 0000000..f25a419
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxxhdpi/ic_launcher_round.png b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000..e96783c
Binary files /dev/null and b/third_party/compose-sonner/sample/src/androidMain/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/third_party/compose-sonner/sample/src/androidMain/res/values/strings.xml b/third_party/compose-sonner/sample/src/androidMain/res/values/strings.xml
new file mode 100644
index 0000000..d512b41
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/androidMain/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">compose-sonner</string>
+</resources>
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/AdvancedSample.kt b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/AdvancedSample.kt
new file mode 100644
index 0000000..943c338
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/AdvancedSample.kt
@@ -0,0 +1,271 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.foundation.BorderStroke
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.ExperimentalLayoutApi
+import androidx.compose.foundation.layout.FlowRow
+import androidx.compose.foundation.layout.IntrinsicSize
+import androidx.compose.foundation.layout.PaddingValues
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.requiredHeight
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material3.Button
+import androidx.compose.material3.CircularProgressIndicator
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableLongStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.RectangleShape
+import androidx.compose.ui.unit.dp
+import com.dokar.sonner.TextToastAction
+import com.dokar.sonner.ToastType
+import com.dokar.sonner.Toaster
+import com.dokar.sonner.ToasterDefaults
+import com.dokar.sonner.rememberToasterState
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.launch
+import kotlin.time.Duration
+
+// Just a random number
+private const val LOADING_TOAST_ID = 0
+
+// Just a mark
+private const val LOADING_TOAST_ICON = 1
+
+@OptIn(ExperimentalLayoutApi::class)
+@Composable
+fun AdvancedSample(modifier: Modifier = Modifier) {
+    var index by remember { mutableLongStateOf(0) }
+
+    val toaster = rememberToasterState()
+
+    val coolToaster = rememberToasterState()
+
+    val coroutineScope = rememberCoroutineScope()
+
+    var toastGenerationJob: Job? by remember { mutableStateOf(null) }
+
+    var isLoading by remember { mutableStateOf(false) }
+
+    fun startLoading() {
+        isLoading = true
+        toastGenerationJob?.cancel()
+        toastGenerationJob = null
+        toaster.dismissAll()
+        coolToaster.dismissAll()
+        toaster.show(
+            message = "Now loading...",
+            duration = Duration.INFINITE,
+            id = LOADING_TOAST_ID,
+            icon = LOADING_TOAST_ICON,
+        )
+    }
+
+    Column(
+        modifier = modifier
+            .fillMaxSize()
+            .padding(16.dp)
+            .verticalScroll(state = rememberScrollState()),
+    ) {
+        Text("Loading (Replace)")
+
+        Spacer(modifier = Modifier.height(8.dp))
+
+        Button(
+            onClick = { startLoading() },
+            enabled = !isLoading,
+        ) {
+            Text("Start loading")
+        }
+
+        Spacer(modifier = Modifier.height(8.dp))
+
+        FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+            Button(
+                onClick = {
+                    isLoading = false
+                    toaster.show(
+                        message = "Success",
+                        id = LOADING_TOAST_ID,
+                        type = ToastType.Success,
+                    )
+                },
+                enabled = isLoading,
+            ) {
+                Text("To success (Replace)")
+            }
+
+            Button(
+                onClick = {
+                    isLoading = false
+                    toaster.show(
+                        message = "Failed",
+                        id = LOADING_TOAST_ID,
+                        type = ToastType.Error,
+                        action = TextToastAction(
+                            text = "Reload",
+                            onClick = { startLoading() },
+                        ),
+                    )
+                },
+                enabled = isLoading,
+            ) {
+                Text("To error (Replace)")
+            }
+        }
+
+        Spacer(modifier = Modifier.height(8.dp))
+
+        FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+            Button(
+                onClick = {
+                    isLoading = false
+                    toaster.dismiss(LOADING_TOAST_ID)
+                    toaster.show(
+                        message = "Success",
+                        type = ToastType.Success,
+                    )
+                },
+                enabled = isLoading,
+            ) {
+                Text("To success (Append)")
+            }
+
+            Button(
+                onClick = {
+                    isLoading = false
+                    toaster.dismiss(LOADING_TOAST_ID)
+                    toaster.show(
+                        message = "Failed",
+                        type = ToastType.Error,
+                        action = TextToastAction(
+                            text = "Reload",
+                            onClick = { startLoading() },
+                        ),
+                    )
+                },
+                enabled = isLoading,
+            ) {
+                Text("To error (Append)")
+            }
+        }
+
+        Spacer(modifier = Modifier.height(16.dp))
+
+        Text("Toast generator")
+
+        Spacer(modifier = Modifier.height(8.dp))
+
+        FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+            Button(
+                onClick = {
+                    isLoading = false
+                    toaster.dismissAll()
+                    coolToaster.dismissAll()
+                    toastGenerationJob?.cancel()
+                    toastGenerationJob = coroutineScope.launch {
+                        while (true) {
+                            toaster.show(
+                                message = "Hello #${index++}",
+                                type = ToastType.entries.random(),
+                            )
+                            delay(255)
+                        }
+                    }
+                },
+                enabled = toastGenerationJob == null,
+            ) {
+                Text("Start")
+            }
+
+            Button(
+                onClick = {
+                    toastGenerationJob?.cancel()
+                    toastGenerationJob = null
+                },
+                enabled = toastGenerationJob != null,
+            ) {
+                Text("Stop")
+            }
+        }
+
+        Spacer(modifier = Modifier.height(16.dp))
+
+        Text("Styling")
+
+        Spacer(modifier = Modifier.height(8.dp))
+
+        Button(
+            onClick = {
+                toastGenerationJob?.cancel()
+                toastGenerationJob = null
+                toaster.dismissAll()
+                coolToaster.show("You got me")
+            },
+        ) {
+            Text("Cool toast")
+        }
+    }
+
+    Toaster(
+        state = toaster,
+        richColors = true,
+        swipeable = !isLoading,
+        iconSlot = { toast ->
+            if (toast.icon == LOADING_TOAST_ICON) {
+                LoadingIcon()
+            } else {
+                // Fallback to the default icon slot
+                ToasterDefaults.iconSlot(toast)
+            }
+        },
+    )
+
+    Toaster(
+        state = coolToaster,
+        shape = { RectangleShape },
+        background = { Brush.linearGradient(0f to Color(0xff6274e7), 1f to Color(0xff8752a3)) },
+        border = { BorderStroke(1.dp, Color.White.copy(alpha = 0.1f)) },
+        contentColor = { Color.White },
+        contentPadding = { PaddingValues(start = 16.dp) },
+        actionSlot = {
+            Box(
+                modifier = Modifier
+                    .widthIn(min = 64.dp)
+                    .requiredHeight(IntrinsicSize.Max)
+                    .clickable { coolToaster.dismiss(it) }
+                    .padding(16.dp),
+            ) {
+                Text("Dismiss", color = Color.White)
+            }
+        }
+    )
+}
+
+@Composable
+private fun LoadingIcon(modifier: Modifier = Modifier) {
+    Box(modifier = modifier.padding(end = 16.dp)) {
+        CircularProgressIndicator(
+            modifier = Modifier.size(18.dp),
+            color = Color.Black,
+            strokeWidth = 1.5.dp,
+        )
+    }
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/BasicSample.kt b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/BasicSample.kt
new file mode 100644
index 0000000..36424fb
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/BasicSample.kt
@@ -0,0 +1,348 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.border
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.ExperimentalLayoutApi
+import androidx.compose.foundation.layout.FlowRow
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material3.Button
+import androidx.compose.material3.ButtonDefaults
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.RadioButton
+import androidx.compose.material3.Switch
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import com.dokar.sonner.TextToastAction
+import com.dokar.sonner.ToastDismissPause
+import com.dokar.sonner.ToastType
+import com.dokar.sonner.Toaster
+import com.dokar.sonner.rememberToasterState
+import kotlin.random.Random
+
+@OptIn(ExperimentalLayoutApi::class)
+@Composable
+internal fun BasicSample(modifier: Modifier = Modifier) {
+    val toaster = rememberToasterState()
+
+    var index by remember { mutableIntStateOf(0) }
+
+    var darkTheme by remember { mutableStateOf(false) }
+
+    var richColors by remember { mutableStateOf(false) }
+
+    var closeButton by remember { mutableStateOf(false) }
+
+    var expanded by remember { mutableStateOf(false) }
+
+    var dismissPause by remember { mutableStateOf(ToastDismissPause.Never) }
+
+    var alignment by remember { mutableStateOf(Alignment.BottomCenter) }
+
+    var maxVisibleToasts by remember { mutableIntStateOf(3) }
+
+    var showContainerBounds by remember { mutableStateOf(false) }
+
+    Column(modifier = modifier.fillMaxSize()) {
+        Column(
+            modifier = Modifier
+                .padding(16.dp)
+                .verticalScroll(state = rememberScrollState()),
+        ) {
+            Text("Types")
+
+            Spacer(modifier = Modifier.height(8.dp))
+
+            FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+                Button(onClick = { toaster.show("Hello #${index++}") }) {
+                    Text("Normal")
+                }
+
+                Button(onClick = {
+                    toaster.show("Hello #${index++}", type = ToastType.Success)
+                }) {
+                    Text("Success")
+                }
+
+                Button(onClick = {
+                    toaster.show("Hello #${index++}", type = ToastType.Info)
+                }) {
+                    Text("Info")
+                }
+
+                Button(onClick = {
+                    toaster.show("Hello #${index++}", type = ToastType.Warning)
+                }) {
+                    Text("Warning")
+                }
+
+                Button(onClick = {
+                    toaster.show("Hello #${index++}", type = ToastType.Error)
+                }) {
+                    Text("Error")
+                }
+
+                Button(onClick = {
+                    toaster.show(
+                        id = Random.nextLong(),
+                        message = "Hello #${index++}",
+                        action = TextToastAction(
+                            text = "Dismiss",
+                            onClick = { toaster.dismiss(it) }
+                        ),
+                    )
+                }) {
+                    Text("Action")
+                }
+
+                Button(onClick = { toaster.show("Title\nHello #${index++}") }) {
+                    Text("Multiline")
+                }
+            }
+
+            Spacer(Modifier.height(16.dp))
+
+            Text("Options")
+
+            ButtonDefaults
+
+            Spacer(modifier = Modifier.height(8.dp))
+
+            FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+                Row(
+                    horizontalArrangement = Arrangement.spacedBy(8.dp),
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { darkTheme = !darkTheme },
+                    )
+                ) {
+                    Switch(
+                        checked = darkTheme,
+                        onCheckedChange = { darkTheme = it },
+                    )
+                    Text("Dark theme")
+                }
+
+                Row(
+                    horizontalArrangement = Arrangement.spacedBy(8.dp),
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { richColors = !richColors },
+                    )
+                ) {
+                    Switch(
+                        checked = richColors,
+                        onCheckedChange = { richColors = it },
+                    )
+                    Text("Rich colors")
+                }
+
+                Row(
+                    horizontalArrangement = Arrangement.spacedBy(8.dp),
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { closeButton = !closeButton },
+                    )
+                ) {
+                    Switch(
+                        checked = closeButton,
+                        onCheckedChange = { closeButton = it },
+                    )
+                    Text("Close button")
+                }
+
+                Row(
+                    horizontalArrangement = Arrangement.spacedBy(8.dp),
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { expanded = !expanded },
+                    )
+                ) {
+                    Switch(
+                        checked = expanded,
+                        onCheckedChange = { expanded = it },
+                    )
+                    Text("Expanded")
+                }
+
+                Row(
+                    horizontalArrangement = Arrangement.spacedBy(8.dp),
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { showContainerBounds = !showContainerBounds },
+                    )
+                ) {
+                    Switch(
+                        checked = showContainerBounds,
+                        onCheckedChange = { showContainerBounds = it },
+                    )
+                    Text("Show container bounds")
+                }
+            }
+
+            Spacer(modifier = Modifier.height(16.dp))
+
+            Text("Dismiss (timer) pause")
+
+            Spacer(modifier = Modifier.height(8.dp))
+
+            FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+                Row(
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { dismissPause = ToastDismissPause.Never }
+                    ),
+                ) {
+                    RadioButton(
+                        selected = dismissPause == ToastDismissPause.Never,
+                        onClick = { dismissPause = ToastDismissPause.Never }
+                    )
+                    Text("Never")
+                }
+
+                Row(
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { dismissPause = ToastDismissPause.OnNotFront }
+                    ),
+                ) {
+                    RadioButton(
+                        selected = dismissPause == ToastDismissPause.OnNotFront,
+                        onClick = { dismissPause = ToastDismissPause.OnNotFront }
+                    )
+                    Text("OnNotFront")
+                }
+
+                Row(
+                    verticalAlignment = Alignment.CenterVertically,
+                    modifier = Modifier.clickable(
+                        interactionSource = remember { MutableInteractionSource() },
+                        indication = null,
+                        onClick = { dismissPause = ToastDismissPause.OnInvisible }
+                    ),
+                ) {
+                    RadioButton(
+                        selected = dismissPause == ToastDismissPause.OnInvisible,
+                        onClick = { dismissPause = ToastDismissPause.OnInvisible }
+                    )
+                    Text("OnInvisible")
+                }
+            }
+
+            Spacer(Modifier.height(16.dp))
+
+            Text("Position")
+
+            Spacer(Modifier.height(8.dp))
+
+            val alignItemSize = 48.dp
+            val containerWidth = alignItemSize * 3 + 16.dp
+            val containerHeight = alignItemSize * 2 + 8.dp
+
+            Box(modifier = Modifier.size(containerWidth, containerHeight)) {
+                val alignments = remember {
+                    listOf(
+                        Alignment.TopStart,
+                        Alignment.TopCenter,
+                        Alignment.TopEnd,
+                        Alignment.BottomStart,
+                        Alignment.BottomCenter,
+                        Alignment.BottomEnd,
+                    )
+                }
+                for (align in alignments) {
+                    Box(
+                        modifier = Modifier
+                            .size(alignItemSize)
+                            .clip(MaterialTheme.shapes.medium)
+                            .background(
+                                if (alignment == align) {
+                                    MaterialTheme.colorScheme.primary
+                                } else {
+                                    MaterialTheme.colorScheme.onBackground.copy(alpha = 0.2f)
+                                }
+                            )
+                            .align(align)
+                            .clickable { alignment = align }
+                    )
+                }
+            }
+
+            Spacer(Modifier.height(16.dp))
+
+            Text("Max visible toasts")
+
+            Spacer(Modifier.height(8.dp))
+
+            Row(
+                horizontalArrangement = Arrangement.spacedBy(8.dp),
+                verticalAlignment = Alignment.CenterVertically,
+            ) {
+                Text(text = maxVisibleToasts.toString(), fontSize = 18.sp)
+
+                TextButton(
+                    onClick = { maxVisibleToasts-- },
+                    enabled = maxVisibleToasts > 1,
+                ) {
+                    Text(text = "-", fontSize = 24.sp)
+                }
+
+                TextButton(
+                    onClick = { maxVisibleToasts++ },
+                    enabled = maxVisibleToasts < 5,
+                ) {
+                    Text(text = "+", fontSize = 20.sp)
+                }
+            }
+        }
+    }
+
+    Toaster(
+        state = toaster,
+        modifier = if (showContainerBounds) Modifier.border(1.dp, Color.Red) else Modifier,
+        maxVisibleToasts = maxVisibleToasts,
+        expanded = expanded,
+        richColors = richColors,
+        darkTheme = darkTheme,
+        showCloseButton = closeButton,
+        alignment = alignment,
+        dismissPause = dismissPause,
+    )
+}
diff --git a/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/GithubIcon.kt b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/GithubIcon.kt
new file mode 100644
index 0000000..f00e60e
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/GithubIcon.kt
@@ -0,0 +1,117 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.ui.graphics.SolidColor
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.StrokeCap
+import androidx.compose.ui.graphics.StrokeJoin
+import androidx.compose.ui.graphics.vector.ImageVector
+import androidx.compose.ui.graphics.vector.group
+import androidx.compose.ui.graphics.PathFillType
+import androidx.compose.ui.graphics.vector.path
+import androidx.compose.ui.unit.dp
+
+private var _GithubIcon: ImageVector? = null
+
+internal val GithubIcon: ImageVector
+    get() {
+        if (_GithubIcon != null) {
+            return _GithubIcon!!
+        }
+        _GithubIcon = ImageVector.Builder(
+            name = "GithubIcon",
+            defaultWidth = 24.dp,
+            defaultHeight = 24.dp,
+            viewportWidth = 256f,
+            viewportHeight = 249f
+        ).apply {
+            group {
+                path(
+                    fill = SolidColor(Color(0xFF161614)),
+                    fillAlpha = 1.0f,
+                    stroke = null,
+                    strokeAlpha = 1.0f,
+                    strokeLineWidth = 1.0f,
+                    strokeLineCap = StrokeCap.Butt,
+                    strokeLineJoin = StrokeJoin.Miter,
+                    strokeLineMiter = 1.0f,
+                    pathFillType = PathFillType.NonZero
+                ) {
+                    moveTo(127.505f, 0f)
+                    curveTo(57.095f, 0f, 0f, 57.085f, 0f, 127.505f)
+                    curveToRelative(0f, 56.336f, 36.534f, 104.13f, 87.196f, 120.99f)
+                    curveToRelative(6.372f, 1.18f, 8.712f, -2.766f, 8.712f, -6.134f)
+                    curveToRelative(0f, -3.04f, -0.119f, -13.085f, -0.173f, -23.739f)
+                    curveToRelative(-35.473f, 7.713f, -42.958f, -15.044f, -42.958f, -15.044f)
+                    curveToRelative(-5.8f, -14.738f, -14.157f, -18.656f, -14.157f, -18.656f)
+                    curveToRelative(-11.568f, -7.914f, 0.872f, -7.752f, 0.872f, -7.752f)
+                    curveToRelative(12.804f, 0.9f, 19.546f, 13.14f, 19.546f, 13.14f)
+                    curveToRelative(11.372f, 19.493f, 29.828f, 13.857f, 37.104f, 10.6f)
+                    curveToRelative(1.144f, -8.242f, 4.449f, -13.866f, 8.095f, -17.05f)
+                    curveToRelative(-28.32f, -3.225f, -58.092f, -14.158f, -58.092f, -63.014f)
+                    curveToRelative(0f, -13.92f, 4.981f, -25.295f, 13.138f, -34.224f)
+                    curveToRelative(-1.324f, -3.212f, -5.688f, -16.18f, 1.235f, -33.743f)
+                    curveToRelative(0f, 0f, 10.707f, -3.427f, 35.073f, 13.07f)
+                    curveToRelative(10.17f, -2.826f, 21.078f, -4.242f, 31.914f, -4.29f)
+                    curveToRelative(10.836f, 0.048f, 21.752f, 1.464f, 31.942f, 4.29f)
+                    curveToRelative(24.337f, -16.497f, 35.029f, -13.07f, 35.029f, -13.07f)
+                    curveToRelative(6.94f, 17.563f, 2.574f, 30.531f, 1.25f, 33.743f)
+                    curveToRelative(8.175f, 8.929f, 13.122f, 20.303f, 13.122f, 34.224f)
+                    curveToRelative(0f, 48.972f, -29.828f, 59.756f, -58.22f, 62.912f)
+                    curveToRelative(4.573f, 3.957f, 8.648f, 11.717f, 8.648f, 23.612f)
+                    curveToRelative(0f, 17.06f, -0.148f, 30.791f, -0.148f, 34.991f)
+                    curveToRelative(0f, 3.393f, 2.295f, 7.369f, 8.759f, 6.117f)
+                    curveToRelative(50.634f, -16.879f, 87.122f, -64.656f, 87.122f, -120.973f)
+                    curveTo(255.009f, 57.085f, 197.922f, 0f, 127.505f, 0f)
+                }
+                path(
+                    fill = SolidColor(Color(0xFF161614)),
+                    fillAlpha = 1.0f,
+                    stroke = null,
+                    strokeAlpha = 1.0f,
+                    strokeLineWidth = 1.0f,
+                    strokeLineCap = StrokeCap.Butt,
+                    strokeLineJoin = StrokeJoin.Miter,
+                    strokeLineMiter = 1.0f,
+                    pathFillType = PathFillType.NonZero
+                ) {
+                    moveTo(47.755f, 181.634f)
+                    curveToRelative(-0.28f, 0.633f, -1.278f, 0.823f, -2.185f, 0.389f)
+                    curveToRelative(-0.925f, -0.416f, -1.445f, -1.28f, -1.145f, -1.916f)
+                    curveToRelative(0.275f, -0.652f, 1.273f, -0.834f, 2.196f, -0.396f)
+                    curveToRelative(0.927f, 0.415f, 1.455f, 1.287f, 1.134f, 1.923f)
+                    moveTo(54.027f, 187.23f)
+                    curveToRelative(-0.608f, 0.564f, -1.797f, 0.302f, -2.604f, -0.589f)
+                    curveToRelative(-0.834f, -0.889f, -0.99f, -2.077f, -0.373f, -2.65f)
+                    curveToRelative(0.627f, -0.563f, 1.78f, -0.3f, 2.616f, 0.59f)
+                    curveToRelative(0.834f, 0.899f, 0.996f, 2.08f, 0.36f, 2.65f)
+                    moveTo(58.33f, 194.39f)
+                    curveToRelative(-0.782f, 0.543f, -2.06f, 0.034f, -2.849f, -1.1f)
+                    curveToRelative(-0.781f, -1.133f, -0.781f, -2.493f, 0.017f, -3.038f)
+                    curveToRelative(0.792f, -0.545f, 2.05f, -0.055f, 2.85f, 1.07f)
+                    curveToRelative(0.78f, 1.153f, 0.78f, 2.513f, -0.019f, 3.069f)
+                    moveTo(65.606f, 202.683f)
+                    curveToRelative(-0.699f, 0.77f, -2.187f, 0.564f, -3.277f, -0.488f)
+                    curveToRelative(-1.114f, -1.028f, -1.425f, -2.487f, -0.724f, -3.258f)
+                    curveToRelative(0.707f, -0.772f, 2.204f, -0.555f, 3.302f, 0.488f)
+                    curveToRelative(1.107f, 1.026f, 1.445f, 2.496f, 0.7f, 3.258f)
+                    moveTo(75.01f, 205.483f)
+                    curveToRelative(-0.307f, 0.998f, -1.741f, 1.452f, -3.185f, 1.028f)
+                    curveToRelative(-1.442f, -0.437f, -2.386f, -1.607f, -2.095f, -2.616f)
+                    curveToRelative(0.3f, -1.005f, 1.74f, -1.478f, 3.195f, -1.024f)
+                    curveToRelative(1.44f, 0.435f, 2.386f, 1.596f, 2.086f, 2.612f)
+                    moveTo(85.714f, 206.67f)
+                    curveToRelative(0.036f, 1.052f, -1.189f, 1.924f, -2.705f, 1.943f)
+                    curveToRelative(-1.525f, 0.033f, -2.758f, -0.818f, -2.774f, -1.852f)
+                    curveToRelative(0f, -1.062f, 1.197f, -1.926f, 2.721f, -1.951f)
+                    curveToRelative(1.516f, -0.03f, 2.758f, 0.815f, 2.758f, 1.86f)
+                    moveTo(96.228f, 206.267f)
+                    curveToRelative(0.182f, 1.026f, -0.872f, 2.08f, -2.377f, 2.36f)
+                    curveToRelative(-1.48f, 0.27f, -2.85f, -0.363f, -3.039f, -1.38f)
+                    curveToRelative(-0.184f, -1.052f, 0.89f, -2.105f, 2.367f, -2.378f)
+                    curveToRelative(1.508f, -0.262f, 2.857f, 0.355f, 3.049f, 1.398f)
+                }
+            }
+        }.build()
+        return _GithubIcon!!
+    }
+
diff --git a/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/Platform.kt b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/Platform.kt
new file mode 100644
index 0000000..1947f8a
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/Platform.kt
@@ -0,0 +1,10 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.runtime.Composable
+
+fun interface LinkOpener {
+    fun open(url: String)
+}
+
+@Composable
+expect fun rememberLinkOpener(): LinkOpener
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/SampleScreen.kt b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/SampleScreen.kt
new file mode 100644
index 0000000..b43c21d
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/SampleScreen.kt
@@ -0,0 +1,119 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.foundation.shape.CircleShape
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.layout.onSizeChanged
+import androidx.compose.ui.platform.LocalDensity
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+
+private enum class SampleType {
+    Basic,
+    Advanced,
+    ViewModel,
+}
+
+@Composable
+fun SampleScreen(modifier: Modifier = Modifier) {
+    val linkOpener = rememberLinkOpener()
+
+    var sampleType by remember { mutableStateOf(SampleType.Basic) }
+
+    var titleHeight by remember { mutableIntStateOf(0) }
+
+    MaterialTheme {
+        Box(modifier = modifier.fillMaxSize()) {
+            Column(
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .onSizeChanged { titleHeight = it.height },
+            ) {
+                Row(
+                    modifier = Modifier
+                        .fillMaxWidth()
+                        .padding(8.dp),
+                    horizontalArrangement = Arrangement.SpaceBetween,
+                    verticalAlignment = Alignment.CenterVertically,
+                ) {
+                    IconButton(onClick = {}, enabled = false) {}
+
+                    Text(text = "Compose Sonner", fontSize = 20.sp, fontWeight = FontWeight.Bold)
+
+                    IconButton(onClick = {
+                        linkOpener.open("https://github.com/dokar3/compose-sonner")
+                    }) {
+                        Icon(imageVector = GithubIcon, contentDescription = null)
+                    }
+                }
+
+                Row(
+                    modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp),
+                    horizontalArrangement = Arrangement.spacedBy(8.dp),
+                ) {
+                    SampleType.entries.forEach {
+                        val isCurrent = it == sampleType
+                        Text(
+                            text = it.name,
+                            modifier = Modifier
+                                .widthIn(min = 72.dp)
+                                .clip(CircleShape)
+                                .background(
+                                    color = if (isCurrent) {
+                                        MaterialTheme.colorScheme.primary
+                                    } else {
+                                        MaterialTheme.colorScheme.onBackground.copy(alpha = 0.1f)
+                                    },
+                                )
+                                .clickable { sampleType = it }
+                                .padding(8.dp, 4.dp),
+                            textAlign = TextAlign.Center,
+                            color = if (isCurrent) {
+                                MaterialTheme.colorScheme.onPrimary
+                            } else {
+                                MaterialTheme.colorScheme.onBackground
+                            },
+                            fontSize = 15.sp,
+                        )
+                    }
+                }
+            }
+
+            val density = LocalDensity.current
+            Column {
+                Spacer(modifier = Modifier.height(with(density) { titleHeight.toDp() }))
+
+                when (sampleType) {
+                    SampleType.Basic -> BasicSample()
+                    SampleType.Advanced -> AdvancedSample()
+                    SampleType.ViewModel -> ViewModelSample()
+                }
+            }
+        }
+    }
+}
diff --git a/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/ViewModelSample.kt b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/ViewModelSample.kt
new file mode 100644
index 0000000..2edb504
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/commonMain/kotlin/com/dokar/sonner/sample/ViewModelSample.kt
@@ -0,0 +1,202 @@
+@file:Suppress("INVISIBLE_MEMBER", "INVISIBLE_REFERENCE")
+
+package com.dokar.sonner.sample
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.ExperimentalLayoutApi
+import androidx.compose.foundation.layout.FlowRow
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.heightIn
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material3.Button
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.runtime.rememberUpdatedState
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.unit.dp
+import com.dokar.sonner.TextToastAction
+import com.dokar.sonner.Toast
+import com.dokar.sonner.ToastType
+import com.dokar.sonner.Toaster
+import com.dokar.sonner.currentNanoTime
+import com.dokar.sonner.listenMany
+import com.dokar.sonner.rememberToasterState
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.flow.update
+import kotlinx.coroutines.launch
+import kotlin.time.Duration
+
+@OptIn(ExperimentalLayoutApi::class)
+@Composable
+internal fun ViewModelSample(
+    modifier: Modifier = Modifier,
+    coroutineScope: CoroutineScope = rememberCoroutineScope(),
+    viewModel: ViewModel = remember(coroutineScope) { ViewModel(coroutineScope) },
+) {
+    val uiState by viewModel.uiState.collectAsState()
+
+    Column(
+        modifier = modifier
+            .fillMaxSize()
+            .padding(16.dp)
+            .verticalScroll(state = rememberScrollState()),
+    ) {
+        Text("UiState")
+
+        Spacer(modifier = Modifier.height(8.dp))
+
+        Text(
+            text = uiState.toString(),
+            modifier = Modifier
+                .fillMaxWidth()
+                .heightIn(min = 100.dp)
+                .clip(MaterialTheme.shapes.medium)
+                .background(MaterialTheme.colorScheme.onBackground.copy(alpha = 0.1f))
+                .padding(8.dp),
+        )
+
+        Spacer(modifier = Modifier.height(16.dp))
+
+        Text("Actions")
+
+        Spacer(modifier = Modifier.height(8.dp))
+
+        FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
+            Button(onClick = { viewModel.loadToSuccess() }, enabled = !uiState.isLoading) {
+                Text("Load to success")
+            }
+
+            Button(onClick = { viewModel.loadToFailure() }, enabled = !uiState.isLoading) {
+                Text("Load to failure")
+            }
+        }
+    }
+
+    UiMessageToaster(
+        messages = uiState.uiMessages,
+        onRemoveMessage = viewModel::removeUiMessageById,
+    )
+}
+
+@Composable
+private fun UiMessageToaster(
+    messages: List<UiMessage>,
+    onRemoveMessage: (id: Long) -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    val toaster = rememberToasterState(
+        onToastDismissed = { onRemoveMessage(it.id as Long) },
+    )
+
+    val currentMessages by rememberUpdatedState(messages)
+
+    LaunchedEffect(toaster) {
+        // Listen to State<List<UiMessage>> changes and map to toasts
+        toaster.listenMany {
+            currentMessages.map { message ->
+                message.toToast(onDismiss = { onRemoveMessage(message.id) })
+            }
+        }
+    }
+
+    Toaster(
+        state = toaster,
+        modifier = modifier,
+        richColors = true,
+        showCloseButton = true,
+    )
+}
+
+private fun UiMessage.toToast(onDismiss: (toast: Toast) -> Unit): Toast = when (this) {
+    is UiMessage.Error -> Toast(
+        id = id,
+        message = message,
+        type = ToastType.Error,
+        duration = Duration.INFINITE,
+        action = TextToastAction(text = "Dismiss", onClick = onDismiss),
+    )
+
+    is UiMessage.Success -> Toast(
+        id = id,
+        message = message,
+        type = ToastType.Success,
+        action = TextToastAction(text = "Dismiss", onClick = onDismiss),
+    )
+}
+
+internal sealed interface UiMessage {
+    val id: Long
+
+    data class Success(
+        val message: String,
+        override val id: Long = currentNanoTime(),
+    ) : UiMessage
+
+    data class Error(
+        val message: String,
+        override val id: Long = currentNanoTime(),
+        val error: Throwable? = null,
+    ) : UiMessage
+}
+
+internal data class UiState(
+    val isLoading: Boolean = false,
+    val uiMessages: List<UiMessage> = emptyList(),
+)
+
+internal class ViewModel(
+    private val viewModelScope: CoroutineScope,
+) {
+    private var id = 0
+    private val _uiState = MutableStateFlow(UiState())
+    val uiState: StateFlow<UiState> = _uiState
+
+    fun loadToSuccess() = viewModelScope.launch {
+        _uiState.update { it.copy(isLoading = true) }
+        delay(1000)
+        _uiState.update {
+            val messages = it.uiMessages.toMutableList()
+            messages.add(UiMessage.Success("Loaded ${id++}"))
+
+            it.copy(isLoading = false, uiMessages = messages)
+        }
+    }
+
+    fun loadToFailure() = viewModelScope.launch {
+        _uiState.update { it.copy(isLoading = true) }
+        delay(1000)
+        _uiState.update {
+            val messages = it.uiMessages.toMutableList()
+            messages.add(UiMessage.Error("Failed"))
+            it.copy(isLoading = false, uiMessages = messages)
+        }
+    }
+
+    fun removeUiMessageById(id: Long) {
+        val index = uiState.value.uiMessages.indexOfFirst { it.id == id }
+        if (index != -1) {
+            _uiState.update { state ->
+                val list = state.uiMessages.toMutableList()
+                list.removeAt(index)
+                state.copy(uiMessages = list)
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/desktopMain/kotlin/com/dokar/sonner/sample/Platform.jvm.kt b/third_party/compose-sonner/sample/src/desktopMain/kotlin/com/dokar/sonner/sample/Platform.jvm.kt
new file mode 100644
index 0000000..51c5eb5
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/desktopMain/kotlin/com/dokar/sonner/sample/Platform.jvm.kt
@@ -0,0 +1,32 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import java.awt.Desktop
+import java.net.URI
+import java.util.Locale
+
+@Composable
+actual fun rememberLinkOpener(): LinkOpener {
+    return remember {
+        LinkOpener {
+            openInBrowser(URI.create(it))
+        }
+    }
+}
+
+// https://stackoverflow.com/a/68426773
+private fun openInBrowser(uri: URI) {
+    val osName by lazy(LazyThreadSafetyMode.NONE) {
+        System.getProperty("os.name").lowercase(Locale.getDefault())
+    }
+    val desktop = Desktop.getDesktop()
+    when {
+        Desktop.isDesktopSupported() && desktop.isSupported(Desktop.Action.BROWSE) ->
+            desktop.browse(uri)
+
+        "mac" in osName -> Runtime.getRuntime().exec("open $uri")
+        "nix" in osName || "nux" in osName -> Runtime.getRuntime().exec("xdg-open $uri")
+        else -> {}
+    }
+}
diff --git a/third_party/compose-sonner/sample/src/desktopMain/kotlin/com/dokar/sonner/sample/main.kt b/third_party/compose-sonner/sample/src/desktopMain/kotlin/com/dokar/sonner/sample/main.kt
new file mode 100644
index 0000000..c661d19
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/desktopMain/kotlin/com/dokar/sonner/sample/main.kt
@@ -0,0 +1,18 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.desktop.ui.tooling.preview.Preview
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.window.Window
+import androidx.compose.ui.window.application
+
+fun main() = application {
+    Window(onCloseRequest = ::exitApplication, title = "compose-sonner") {
+        SampleScreen()
+    }
+}
+
+@Preview
+@Composable
+fun AppDesktopPreview() {
+    SampleScreen()
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/iosMain/kotlin/com/dokar/sonner/sample/Platform.ios.kt b/third_party/compose-sonner/sample/src/iosMain/kotlin/com/dokar/sonner/sample/Platform.ios.kt
new file mode 100644
index 0000000..13f8687
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/iosMain/kotlin/com/dokar/sonner/sample/Platform.ios.kt
@@ -0,0 +1,20 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import platform.Foundation.NSURL
+import platform.UIKit.UIApplication
+
+@Composable
+actual fun rememberLinkOpener(): LinkOpener {
+    return remember {
+        LinkOpener {
+            openInBrowser(it)
+        }
+    }
+}
+
+private fun openInBrowser(url: String?) {
+    val nsUrl = url?.let { NSURL.URLWithString(it) } ?: return
+    UIApplication.sharedApplication.openURL(nsUrl)
+}
diff --git a/third_party/compose-sonner/sample/src/iosMain/kotlin/com/dokar/sonner/sample/main.kt b/third_party/compose-sonner/sample/src/iosMain/kotlin/com/dokar/sonner/sample/main.kt
new file mode 100644
index 0000000..9c3ca8f
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/iosMain/kotlin/com/dokar/sonner/sample/main.kt
@@ -0,0 +1,6 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.ui.window.ComposeUIViewController
+import platform.UIKit.UIViewController
+
+fun MainViewController(): UIViewController = ComposeUIViewController { SampleScreen() }
diff --git a/third_party/compose-sonner/sample/src/jsMain/kotlin/com/dokar/sonner/sample/Platform.wasmJs.kt b/third_party/compose-sonner/sample/src/jsMain/kotlin/com/dokar/sonner/sample/Platform.wasmJs.kt
new file mode 100644
index 0000000..f23849b
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/jsMain/kotlin/com/dokar/sonner/sample/Platform.wasmJs.kt
@@ -0,0 +1,14 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import kotlinx.browser.window
+
+@Composable
+actual fun rememberLinkOpener(): LinkOpener {
+    return remember {
+        LinkOpener {
+            window.open(url = it, target = "_blank")
+        }
+    }
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/jsMain/kotlin/com/dokar/sonner/sample/main.kt b/third_party/compose-sonner/sample/src/jsMain/kotlin/com/dokar/sonner/sample/main.kt
new file mode 100644
index 0000000..68eb5b4
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/jsMain/kotlin/com/dokar/sonner/sample/main.kt
@@ -0,0 +1,9 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.ui.ExperimentalComposeUiApi
+import androidx.compose.ui.window.CanvasBasedWindow
+
+@OptIn(ExperimentalComposeUiApi::class)
+fun main() {
+    CanvasBasedWindow(canvasElementId = "ComposeTarget") { SampleScreen() }
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/jsMain/resources/index.html b/third_party/compose-sonner/sample/src/jsMain/resources/index.html
new file mode 100644
index 0000000..5e042fe
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/jsMain/resources/index.html
@@ -0,0 +1,14 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Compose Sonner Demo</title>
+    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
+    <script type="application/javascript" src="skiko.js"></script>
+
+</head>
+<body>
+<canvas id="ComposeTarget"></canvas>
+<script type="application/javascript" src="composeApp-jscanvas.js"></script>
+</body>
+</html>
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/wasmJsMain/kotlin/com/dokar/sonner/sample/Platform.wasmJs.kt b/third_party/compose-sonner/sample/src/wasmJsMain/kotlin/com/dokar/sonner/sample/Platform.wasmJs.kt
new file mode 100644
index 0000000..f23849b
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/wasmJsMain/kotlin/com/dokar/sonner/sample/Platform.wasmJs.kt
@@ -0,0 +1,14 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import kotlinx.browser.window
+
+@Composable
+actual fun rememberLinkOpener(): LinkOpener {
+    return remember {
+        LinkOpener {
+            window.open(url = it, target = "_blank")
+        }
+    }
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/wasmJsMain/kotlin/com/dokar/sonner/sample/main.kt b/third_party/compose-sonner/sample/src/wasmJsMain/kotlin/com/dokar/sonner/sample/main.kt
new file mode 100644
index 0000000..68eb5b4
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/wasmJsMain/kotlin/com/dokar/sonner/sample/main.kt
@@ -0,0 +1,9 @@
+package com.dokar.sonner.sample
+
+import androidx.compose.ui.ExperimentalComposeUiApi
+import androidx.compose.ui.window.CanvasBasedWindow
+
+@OptIn(ExperimentalComposeUiApi::class)
+fun main() {
+    CanvasBasedWindow(canvasElementId = "ComposeTarget") { SampleScreen() }
+}
\ No newline at end of file
diff --git a/third_party/compose-sonner/sample/src/wasmJsMain/resources/index.html b/third_party/compose-sonner/sample/src/wasmJsMain/resources/index.html
new file mode 100644
index 0000000..09c10fd
--- /dev/null
+++ b/third_party/compose-sonner/sample/src/wasmJsMain/resources/index.html
@@ -0,0 +1,13 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Compose Sonner Demo</title>
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <script type="application/javascript" src="skiko.js"></script>
+    <script type="application/javascript" src="composeApp.js"></script>
+</head>
+<body>
+<canvas id="ComposeTarget"></canvas>
+</body>
+</html>
\ No newline at end of file
diff --git a/third_party/compose-sonner/settings.gradle.kts b/third_party/compose-sonner/settings.gradle.kts
index d5d0ea9..a4c4587 100644
--- a/third_party/compose-sonner/settings.gradle.kts
+++ b/third_party/compose-sonner/settings.gradle.kts
@@ -16,4 +16,5 @@ dependencyResolutionManagement {
     }
 }
 
+include(":sample")
 include(":sonner")
